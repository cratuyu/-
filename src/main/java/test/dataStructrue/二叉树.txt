二叉树：每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点），并且，二叉树的子树有左右之分，其次序不能任意颠倒。
二叉树的性质：
　　性质1：在二叉树的第 i 层上至多有2i-1个结点。
　　性质2：深度为k的二叉树至多有2k-1个结点（k>=1）。
　　性质3：对任何一颗二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。

设n1为二叉树T中度为1的节点数，因为二叉树中所有结点的度均小于或等于2，所以其结点总数为：n=n0+n1+n2；再看二叉树中的分支数，除了根节点外，
其余结点都有一个分支进入，设B为分支数，则n=B+1；由于这些分支是由度为1或2的结点射出的，所以有B=n1+2*n2，于是得n=n1+2n2+1，所以n0=n2+1
满二叉树：一棵深度为k且有2k-1个结点的二叉树。每一层上的结点数都是最大结点数。

完全二叉树：如果对满二叉树的结点进行连续编号，约定编号从根结点起，自上而下，自左至右。深度为k的，有n个结点的二叉树，当且仅当其每一个结点都
与深度为k的满二叉树中编号从1至n的结点一一对应。

特点:（1）叶子结点只可能在层次最大的两层上出现；
     （2）对任一结点，若其右分支下的子孙的最大层次为h，则其左分支下的子孙的最大层次必为lh+1。
　　性质4：具有n个结点的完全二叉树的深度为log2n+1（2为下标，取log2n最小整数）。

　　性质5：如果对一棵有n个结点的完全二叉树（其深度为log2n+1）（取log2n最小整数）的结点按层序编号（从第1层到第log2n+1层，每层从左到右），
    则对任一结点i（1<=i<=n），有：
　　　　（1）如果i=1，则结点i是二叉树的根，无双亲；如果i>1，则其双亲PARENT(i)是结点i/2（取最小整数）。
　　　　（2）如果2i>n，则结点i无左孩子（结点i为叶子结点）；否则其左孩子LCHILD(i)是结点2i。
　　　　（3）如果2i+1>n，则结点i无右孩子；否则其右孩子RCHILD(i)是结点2i+1。

最优二叉树（赫夫曼树）：从树中一个结点到另一个结点之间的分支构成这两个结点之间的路径，路径上的分支数目称为路径长度。树的路径长度是从
树根到每一个结点的路径长度之和。结点的带权路径长度为从该结点到树根之间的路径长度与结点上权的乘积。树的带权路径长度为树中所有叶子结点
的带权路径长度之和。

二叉排序树：或者是一棵空树；或者是具有下列性质的二叉树：
    （1）若它的左子树不空，则左子树上所有结点的值均小于它的根节点的值；
    （2）若它的右子树上所有结点的值均大于它的根节点的值；
    （3）它的左、右子树也分别为二叉排序树。

平衡二叉树：又称AVL树。它或者是一棵空树，或者是具有下列性质的二叉树。它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度只差的绝对值不超过1。
若将二叉树上结点的平衡因子BF定义为该结点的左子树的深度减去它的右子树的深度，则平衡二叉树上所有结点的平衡因子只可能是-1、0和1。

红黑树：红黑树是一种自平衡排序二叉树，树中每个节点的值，都大于或等于在它的左子树中的所有节点的值，并且小于或等于在它的右子树中的所有节点的值，
这确保红黑树运行时可以快速地在树中查找和定位的所需节点。
    性质 1：每个节点要么是红色，要么是黑色。
    性质 2：根节点永远是黑色的。
    性质 3：所有的叶节点都是空节点（即 null），并且是黑色的。
    性质 4：每个红色节点的两个子节点都是黑色。（从每个叶子到根的路径上不会有两个连续的红色节点）
    性质 5：从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点。