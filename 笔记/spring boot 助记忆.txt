spring 的依赖注入的最大亮点就是你所有的Bean对Spring容器的存在是没有意识的
也即你可以将你的容器替换成别的容器, 如Google Guice, 这时 Bean之间的耦合度很低

但是在实际项目中, 不可避免的要用到Spring容器本身的功能资源, 这时你的Bean必须要
意识到Spring容器的存在, 才能调用spring所提供的资源, 这就是Spring Aware
此时Bean 将会和 Spring框架耦合

BeanNameAware       获得到容器中Bean的名称
BeanFactoryAware    获得当前 bean factory,这样可以调用容器的服务
ApplicationContextAware*    当前的application context, 这样可以调用容器的服务
MessageSourceAware      获得message source, 这样可以获得文本信息
ApplicationEventPublisherAware      应用事件发布器, 可以发布事件.
ResourceLoaderAware     获得资源加载器, 可以获得外部资源文件


依赖注入(dependency injection-DI) 控制翻转(Inversion of Control-IOC)
    这两个概念在spring 环境下是等同的概念
    控制翻转是通过依赖注入实现的. 所谓依赖注入指的是容器负责创建对象和维护对象间的依赖关系,而不是通过对象本身负责自己的
    创建好解决自己的依赖

Java配置 是通过 @Configuration 和 @Bean 实现的
    @Configuration声明当前类是一个配置类, 相当于一个Spring配置的xml文件
    @Bean 注解在方法上, 声明当前方法的返回值为一个Bean
   
一般原则为 全局配置使用Java配置(如数据库相关配置 MVC相关配置), 业务Bean的配置使用注解配置(@Service @Component @Repository @Controller)


Bean的初始化和销毁
在我们实际开发的时候, 经常会遇到在Bean使用之前或者之后做些必要的操作, Spring对Bean的生命周期的操作提供了支持. 在使用Java
配置和注解配置提供如下两种方式;

Java配置方式: 使用 @Bean的 initMethod 和 destroyMethod (相当于 xml 配置的 init-method 和 destroy-method)
注解方式: 利用 JSR-250的 @PostConstruct和 @PreDestroy (需先再 pom 文件 增加 JSR250的支持)

  第一种使用方法 : @Bean(initMethod="方法名",destroyMethod="方法名")
  第二种使用方法 : 创建一个类 给初始化方法 注释 @PostConstruct 销毁方法 注释 @PreDestroy


Spring  通过任务执行器 (TaskExecutor) 来实现多线程和并发编程. 使用 ThreadPoolTaskExecutor 可实现 一个基于线程池的
TaskExector, 在配置类中通过 @EnableAsync 开启对异步任务的支持, 并通过在实际执行的Bean的方法中使用 @Async 注解来声明其
为一个异步任务

  配置类 实现 AsyncConfigurer接口 并重写 getAsyncExecutor 方法, 并返回一个 ThreadPoolTaskExecutor, 这样我们就获得了一个基于
  线程池 TaskExecutor

  通过 @Async 注解表名该方法是个异步方法, 如果注解在类级别, 则表明 该类所有的方法都是异步方法, 而这里的方法自动被注入
  使用 ThreadPoolTaskExecutor 作为 TaskExecutor


计划任务 在配置类上注解 @EnableScheduling 来开启对计划任务的支持, 然后在要执行计划任务的方法上注解 @Scheduled 声明
这是一个计划任务
Spring 通过 @Scheduled 支持多种类型的计划任务, 该注解包含 cron、fixDelay、fixRate等属性
  使用cron属性 可按照指定时间执行  cron 是 UNIX和 UNIX(Linux)系统下的定时任务, fixRate 属性 则代表 每隔固定时间执行

处理request和response里的数据. 使用HttpMessageConverter 


服务器端消息推送 SSE(Server Send Event 服务端发送事件) 的服务器端推送 和 基于3.0+的异步方法特性, 其中第一种方式需要新式浏览器的
支持, 第二种方式是跨浏览器的
 































