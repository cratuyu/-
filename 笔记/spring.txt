核心模块
Spring Core 模块是Spring的核心容器, 它实现了 IoC模式, 提供了 Spring框架的基础
功能. 在模块中包含最重要的BeanFactory类是Spring的核心类, 负责对JavaBean的配置
与管理. Spring Core模块采用 Factory模式实现了 IoC容器即依赖注入
Context模块
Spring Context 模块继承BeanFactory (或者说Spring核心) 类, 并且添加了事件处理
国际化 资源装载 透明装载以及数据校验等功能. 它还提供了框架式的bean的访问方式和
很多企业级的功能, 如JNDI访问 支持EJB 远程调用 集成模板框架 Email 和定时任务调度等
AOP模块
Spring继承了所有AOP功能. 通过事务管理可以使任意Spring管理的对象AOP化, Spring提供了
用标准Java语言编写的AOP框架, 它的大部分内容都是根据AOP联盟的API而开发的. 它使应用
程序抛开EJB的复杂性, 但拥有传统EJB的关键功能
DAO模块
DAO模块提供了JDBC的抽象层, 简化了数据库厂商的异常错误(不再从SQLException继承大批代码)
,大幅度减少了代码的编写, 并且提供了对声明式事务和编程式事务的支持
O/R 映射模块
Spring ORM提供了 对现有ORM框架的支持 各种流行的ORM框架已经做得非常成熟, 并且拥有
大规模的市场 (如Hibernate). Spring没有必要开发新的ORM工具, 但是它对Hibernate提供了
完美的整合功能, 同时也支持其他ORM工具
Web模块
Spring Web模块建立在Spring Context基础之上, 它提供了Servlet监听器的Context和
Web应用的上下文. 对现有的Web框架(如JSF Tapestry Struts)提供了集成
MVC模块
Spring Web MVC 模块建立在Spring核心功能之上, 这使它能用有Spring框架的所有特性
能够适应多种多视图 模板技术 国际化 和验证服务 实现控制逻辑和业务逻辑清晰的分离

Spring内置了日志组件log4j.jar 配置详见javaweb18.1

了解Spring中的bean
  在Spring中那些组成应用主体(backbone)及由SpringIoC容器所管理的对象被称为bean
  简单地讲, bean就是由Spring容器初始化 装配及被管理的对象. 除此之外, bean就没有
  特别之处了(与程序中其他的类没有什么区别). 例如, 一家公司的经理就是Spring容器
  , 它负责管理公司内部的事务; 而员工就是Spring中的bean, 因为他们受公司经理的管辖,
  不是这家公司员工的人就不是bean, 因为他们不再这个公司经理管辖范文之内,
  所以bean只是Spring容器初始化 装配及被管理的对象


对于Factory模式 采用java经典的工厂模式, 通过从XML配置文件或属性文件(.properties)
中读取JavaBean的定义, 来实现JavaBean的创建 配置 和管理 BeanFactory有很多实现类
其中XmlBeanFactory可以通过流行的XML文件格式读取配置信息来装载JavaBean
以装载bean为例.
    Resource resource = new ClassPathResource("applicationContext.xml")  // 装载配置文件
    BeanFactory factory = new XmlBeanFactory(resource)
    Test test = (Test) factory.getBean("test")  // 获取bean
CLassPathResource 读取XML文件并传参到XmlBeanFactory, applicationContext 文件中的代码如下
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframeworl.org/dtd/spring-beans.dtd">
    <beans>
        <bean id="test" class="com.mr.test.Test"/>
    </beans>
在<beans> 标签中通过<bean> 标签定义JavaBean的名称和类型, 在程序代码中利用BeanFactory的
getBean()方法获取JavaBean的实例并且向上转为需要的接口类型, 这样在容器中就开始了这个
JavaBean的生命周期

ApplicationContext的应用
Appliction容器有着BeanFactory的所有特性, 同时也允许使用更多的声明方式来得到开发人员
需要的功能
ApplicationContext接口有3个实现类, 可以实例化其中任何一个类来创建Spring的
ApplicationContext容器.

ClassPathXmlApplicationContext是ApplicationContext接口的3个实现类之一, 它从
当前类路径中检索配置文件并装载它来创建容器的实例
    ApplicationContext context = new ClassPathXmlApplicationContext(String configLocation);
    其中, configLocation参数指定了Spring配置文件的名称和位置

FileSystemXmlApplicationContext 类也是ApplicationContext接口的实现类, 它和
ClassPathXmlApplicationContext类的区别在于读取Spring配置文件的方式. 它不再从类路径中获取
配置文件, 而是通过参数指定配置文件的位置, 可以获取类路径之外的资源

WebApplicationContext类
WebApplicationContext是Spring的Web应用容器, 有两种方法可以在Servlet中使用
WebApplicationContext. 第一种方法是在Servlet的web.xml文件中配置Spring的
ContextLoaderListener监听器; 第二种方法同样要修改web.xml配置文件, 在配置文件
中添加一个Servlet, 定义使用Spring的org.springframework.web.context.ContextLoaderServlet类


IoC 控制反转 使用类的实例之前, 需要先创建对象的实例 但是IoC将创建实例的任务
交给IoC容器 , 这样开发应用代码时只需要直接使用类的实例, 这就是IoC
依赖注入有3种实现类型 Spring支持后两种
接口注入
  基于接口将调用与实现分离. 这种依赖注入方式必须实现容器所规定的接口, 使程序代码
  和容器的API绑定在一起, 这不是理想的依赖注入方式
Setter注入
  基于JavaBean的Setter()方法为属性赋值. 在实际开发中得到了最广泛的应用(得力于Spring框架)
构造器注入
  基于构造方法为属性赋值. 容器通过调用类的构造方法, 将其所需的依赖关系注入其中

Spring中对Setter()方法的支持 配置文件中<property>元素可以为JavaBean的Setter()方法传参
<beans>
    <bean name="bean名称" class="路径+类名">
      <property name="属性名">
        <value>值</value>
      </property>
      ...
    </bean>
</beans>
如果当JavaBean的某个属性是List集合类型或数组时, 需要使用<list>标签为List
集合类型或数组的每一个元素赋值

构造器注入
  在类被实例化时, 它的构造方法被调用并且只能调用一次, 所以构造器常被用于类
  的初始化操作.<constructor-arg> 是<bean>元素的子元素. 通过<constructor>元素
  的<value>子元素可以为构造方法传参
在Spring的配置文件 applicationContext.xml中通过<constructor-arg>元素为JavaBean的属性赋值
<beans>
    <bean name="bean名称" class="路径+类名">
      <constructor-arg>
        <value>值</value>
      </constructor-arg>
      <constructor-arg>
         <value>值</value>
       </constructor-arg>
       ...
    </bean>
</beans>
也可以在constructor元素中使用 index属性指定为构造方法的哪个参数赋值
type属性 可以指定参数类型 以确定要为构造方法的哪个参数赋值 当需要赋值的属性在
构造方法中没有相同的类型时, 可以使用这个参数

匿名内部JavaBean的创建
<!-- 定义学生匿名内部类 -->
<bean id="school" class="School">
    <property name="student">
        <bean class="Student"/>
    </property>
</bean>
代码中定义了匿名的Student类, 将这个匿名内部类赋给了School类的实例对象

自动装配
<bean> 元素的autowire属性负责自动装配<bean>标签定义JavaBean的属性. 这样做可以
省去很多配置JavaBean属性的标签代码, 使代码整洁 美观 但是它也有负面影响,使用自动装配
之后, 无法从配置文件中读懂JavaBean需要什么属性
按名称自动装配
在Spring的配置文件applicationContext.xml中设置bean的自动装配
Spring将根据bean中的属性名称 自动将User对象注入到指定的bean中
<bean autowire="byName" id="printInfo" class="com.mr.user.PrintInfo">
注意:
  按bean名称自动装配类型存在错误装配JavaBean的可能, 如果配置文件中定义了与需要
  自动装配的JavaBean的名称相同而类型不同的JavaBean, 那么它会错误地注入不同类型的JavaBean

按bean类型装配
Spring以bean类型区分自动装配, 这次容器匹配的不再是bean的名称. 容器会自动寻找
与JavaBean的属性类型相同的JavaBean的定义, 并将其注入到需要自动装配的JavaBean中
<bean autowire="byType" id="printInfo" class="com.mr.user.PrintInfo">
注意:
  如果在配置文件中再次添加一个User1类的实现对象, byType自动装配类型会因为
  无法自动识别装配哪一个JavaBean而抛出org.springframework.beans.factory.UnsatisfiedDependencyException异常

自动装配的其他方式
  在Spring中还有另外3种自动装配的方式, 通过设置autowire的不同属性值来实现.
  1. no 属性
    这是autowire采用的默认值, 它采用自动装配. 必须使用ref 直接引用其他bean.
    这样可以增加代码的可读性, 并且不易出错
  2. constructor 属性
    通过构造方法的参数类型自动装配. 此类型会使容器自动寻找与JavaBean的构造方法
    的参数类型相同的bean, 并注入到需要自动装配的JavaBean中, 它与byType类型存在相同的
    无法识别自动装配的情况
  3.autodetect 属性
    首先会使用constructor方式来自动装配, 然后使用byType方式, 此类型也存在与byType和
    constructor相同的异常情况. 建议在使用自动装配时把容易出现问题的JavaBean使用手动
    装配注入依赖属性

自动装配的优缺点:
  自动装配的优点
    自动装配能显著减少配置的数量。不过，采用bean模板也可以达到同样的目的。
    自动装配可以使配置与Java代码同步更新。例如，如果需要给一个Java类增加一
    个依赖，那么该依赖将被自动实现而不需要修改配置。因此，强烈推荐在开发过
    程中采用自动装配，而在系统趋于稳定时改为显式装配的方式。
  自动装配的缺点
    Spring会尽量避免在装配不明确时进行猜测，因为装配不明确可能出现难以预料的结果，
    而且Spring所管理的对象之间的关联关系也不再能清晰地进行文档化。如果采用byType方
    式自动装配，那么容器中类型与自动装配bean的属性或者构造函数参数类型一致的bean
    只能有一个。如果配置可能存在多个这样的bean,那么就要考虑采用显式装配。


属性名称                        说  明
    id          代表JavaBean的实例对象。在JavaBean实例化后可以通过id来引用其实例对象
    name        代表JavaBean的实例对象名
    class       JavaBean的类名(包含路径，如com.test.Example)，元素的必选属性
    singleton       是否使用单实例
    autowire        Spring的JavaBean自动装配功能
    init-method   指定JavaBean的初始化方法
    destroy-method  指定JavaBean被回收之前调用的销毁方法
    depends-on    用于保证在depends on指定的JavaBean被实例化之后，再实例化自身JavaBean

singleton的bean生命周期与Spring IoC 容器是一致的,


1. <bean id="test" class="com.mr.Test"/>  //默认即为singleton 作用域
2. <bean id="test" class="com.mr.Test" singleton="true"/> //将singleton属性设置为true
3. <bean id="test" class="com.mr.Test" scope="singleton"/>  //利用scope属性指定

prototype 作用域的bean会导致在每次对该bean请求(将其注入到另一个bean中, 或者调用
容器的getBean()方法)时都会创建一个新的bean实例. 但是在prototype作用域中当bean被容器
创建完毕, 并且将实例对象返回给请求方之后, 容器中就不再拥有当前返回对象的引用
,容器将实例对象的生命周期的管理工作交给请求方负责, 所以在客户端代码中必须使用bean的
后置处理器清除prototype作用域的bean, 但是后置处理器持有要被清除的bean的引用

技巧: 对所有有状态的bean应该使用prototype作用域, 而对无状态的bean则应该使用singleton
作用域 通常情况下, DAO不会被配置成prototype, 因为一个典型的DAO不会持有任何会话状态
因此应该使用singleton

初始化和销毁
  BeanFactory中bean的生命周期分为实例化, 初始化 使用 和销毁4个阶段 下面介绍初始化和
  销毁时对bean的特殊处理


在bean被实例化的过程中，容器会按照JavaBean的定义初始化bean的所有属性和依赖关系。具体的初始化步骤如下:
    (1)在bean的定义中，如果<bean>标签使用了autowire属性，Spring会对bean完成自动装配。
    (2)通过get()和set()方法配置bean的属性。
    (3)如果bean实现了BeanNameAware接口，容器将会调用bean的setBeanName()方法来传递bean的ID。
    (4)同样，如果bean实现BeanFactoryAware接口，容器将调用bean的setBeanFactory()方法将容器本身注入到JavaBean中。
    (5)如果在容器中注册了BeanPostProcessor 接口的实现类，将调用这个实现类的postProcessBeforeInitialization()方法，完成bean的预处理方法。
    (6)如果bean实现了InitializingBean 接口，容器会调用JavaBean的afterPropertiesSet(方法修改JavaBean的属性)。
    (7)在XML中配置bean时，如果用init-method属性指定了初始化方法，那么容器会执行指定的方法来设置属性。
    (8)容器中如果注册了BeanPostProcessor 的实现类，将调用实现类的postProcess AfterInitialization()方法完成bean的后期处理方法。

bean的销毁
  当关闭容器时, 容器会销毁所有bean 但是如果bean定制了特殊的销毁方法, 容器会在
  销毁该bean之前调用这个方法完成资源回收等操作. 详细说明如下
  (1) 在销毁bean之前如果bean实现了DisposableBean接口, 那么容器会调用bean的destroy()
    方法来完成销毁前的工作. 例如,在JavaBean销毁之前对其使用的数据库连接的关闭, 文件数据流的
    关闭等
  (2) 如果在bean的定义信息中指定了JavaBean的销毁方法, 那么在bean被销毁之前会先去执行
    指定的方法, 如果同时实现了步骤(1)的接口, 会先去执行步骤(1)的destroy()方法, 即
    DisposableBean接口优先于bean的定义

自定义属性编辑器
来自于 java.beans.PropertyEditor接口, 它支持各种不同类型显示和更新属性值得方式
大多数属性编辑器只需要支持PropertyEditor接口中的部分方法. 简单的属性编辑器可能只支持
getAsText()和setAsText()方法



Spring demo项目中 基础搭建篇

我们的Example类上使用的第一个注解是 @RestController 。这被称为一个构造型（stereotype）注解。它为阅读代码的人们
提供建议。对于Spring，该类扮演了一个特殊角色。在本示例中，我们的类是一个web @Controller ，所以当处理进来的web
请求时，Spring会询问它。
@RequestMapping 注解提供路由信息。它告诉Spring任何来自"/"路径的HTTP请求都应该被映射到 home 方
法。 @RestController 注解告诉Spring以字符串的形式渲染结果，并直接返回给调用者

第二个类级别的注解是 @EnableAutoConfiguration 。这个注解告诉Spring Boot根据添加的jar依赖猜测你想如何配置Spring。
由于 spring-boot-starter-web 添加了Tomcat和Spring MVC，所以auto-configuration将假定你正在开发一个web应用并相应地
对Spring进行设置。
Starter POMs和Auto-Configuration：设计auto-configuration的目的是更好的使用"Starter POMs"，但这两个概念没有直接
的联系。你可以自由地挑选starter POMs以外的jar依赖，并且Spring Boot将仍旧尽最大努力去自动配置你的应用。

我们的应用程序最后部分是main方法。这只是一个标准的方法，它遵循Java对于一个应用程序入口点的约定。我们的main方法通过
调用run，将业务委托给了Spring Boot的SpringApplication类。SpringApplication将引导我们的应用，启动Spring，相应地启动
被自动配置的Tomcat web服务器。我们需要将 Example.class 作为参数传递给run方法来告诉SpringApplication谁是主要的Spring
组件。为了暴露任何的命令行参数，args数组也会被传递过


Spring 之AOP
切面(Aspect)
  切面是对象操作过程中的截面, 是一段代码, 这段代码将被 植入 到程序流程中
连接点(Join Point)
  连接点是指对象操作过程中的某个阶段点, 在程序流程上的任意一点,都可以是连接点
  连接点实际上是对象的一个擦欧洲哦, 例如, 对象调用某个方法, 读写对象的实例或者某个方法抛出了异常等
切入点(Pointcut)
  切入点是连接点的集合, 切面与程序流程的交叉点 便是程序的切入点. 确却地说, 它是 切面注入到程序中的
  位置. 换句话说, 切面 是通过切入点被注入的. 在程序中可以有很多个切入点
通知(Advice)
  是某个切入点被横切后, 所采取的处理逻辑. 也就是说, 在切入点处拦截程序后, 通过通知来执行切面
目标对象(Target)
  所有被通知的对象(也可以理解为被代理的对象) 都是目标对象. 目标对象 被AOP所关注,
  它的属性的改变会被关注, 它行为的调用也会被关注, 它的方法传参的变化仍然会被关注. AOP会注意目标
  对象的变动, 随时准备向目标对象 注入切面
织入(Weaving)
  织入是将切面功能应用到目标对象的过程. 由代理工厂创建一个代理对象, 这个代理可以为目标对象执行切面功能
    AOP的织入方式有三种: 编译时期织入 类加载时期织入和 执行期织入. SpringAOP一般多见于执行期织入
引入(Introduction)
  对一个已编译完类(class), 在运行时期, 动态地向这个类中加载属性和方法

静态切入点
  静态往往意味着不变, 例如一个对象的方法签名是固定不变的, 无论在程序的任何位置调用, 方法名都不会改变
  静态切入点可以为对象的方法签名. 例如在某个对象调用了execute()方法时 该方法就可以是静态切入点. 静态
  切入点 需要在配置文件时指定,  关键配置见java web 19.2.1
动态切入点
  动态切入点是相对于静态切入点的
  静态切入点只能应用在相对不变的位置, 而动态切入点应用在相对变化的位置, 例如方法的参数上, 由于
  在程序运行过程中传递的参数是变化的, 所以切入点也随之变化, 它会根据不同的参数来织入不同的切面.
  由于每次织入都要重新计算切入点的位置, 而且结果不能缓存, 所以动态切入点比静态切入点的性能要低得多
  ,但是它能够随着程序中参数的变化而织入不同的切面,所以它比静态切入点要灵活的多





























